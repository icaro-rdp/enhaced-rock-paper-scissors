#N canvas 348 22 1920 944 10;
#X msg 511 -92 close;
#X obj 23 -156 cnv 15 440 60 empty empty empty 20 12 0 14 #c0d828 #404040 0;
#X msg 500 -119 devices;
#X floatatom 560 -111 5 0 0 0 - - - 0;
#X msg 560 -92 open \$1;
#X text 31 -148 [serial_print]: abstraction that works with Arduinos' Serial.print() and Serial.println() functions (with the use of [comport]);
#X text 18 343 Inlets:;
#X text 58 360 1st: bytes from [comport];
#X text 18 426 Outlets:;
#X obj 500 -5 s;
#X floatatom 500 75 5 0 0 0 - - - 0;
#X floatatom 540 75 5 0 0 0 - - - 0;
#X floatatom 581 75 5 0 0 0 - - - 0;
#X text 19 286 Arguments: delimiter type (tab \, space \, comma \, any). You can provide up to two arguments (cause three arguments is the same as "any"). if no argument is provided \, then all three symbols will work as delimiters;
#X text 58 375 2nd: change delimiter type with a symbol (as with the arguments \, you can use two delimiters separated by a space \, e.g. "tab comma");
#X obj 500 51 unpack f f f;
#X obj 630 51 unpack f f f;
#X obj 630 74 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 670 74 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 711 74 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X text 26 -92 [serial_print] is a vanilla abstraction that works with [comport] and Arduino's Serial.print() and Serial.println() functions.;
#N canvas 37 103 505 369 another_way_to_use_it 0;
#X msg 49 140 close;
#X msg 38 91 devices;
#X floatatom 128 121 5 0 0 0 - - - 0;
#X msg 128 140 open \$1;
#X obj 38 183 comport;
#X obj 38 227 list prepend;
#X obj 38 249 list trim;
#X floatatom 38 317 5 0 0 0 - - - 0;
#X floatatom 78 317 5 0 0 0 - - - 0;
#X floatatom 119 317 5 0 0 0 - - - 0;
#X obj 38 295 unpack f f f;
#X obj 162 295 unpack f f f;
#X obj 162 316 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 202 316 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 243 316 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X text 36 43 Instead of [send] and [receive] \, you can also use [route] \, but the [send]/[receive] technique might be a bit more intuitive...;
#X text 38 13 Close [comport] on the parent patch before attempting to open this one.;
#X obj 38 271 route Analog_values: Digital_values:;
#X obj 38 205 serial_print any;
#X obj 49 118 loadbang;
#X connect 0 0 4 0;
#X connect 1 0 4 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 18 0;
#X connect 5 0 6 0;
#X connect 6 0 17 0;
#X connect 10 0 7 0;
#X connect 10 1 8 0;
#X connect 10 2 9 0;
#X connect 11 0 12 0;
#X connect 11 1 13 0;
#X connect 11 2 14 0;
#X connect 17 0 10 0;
#X connect 17 1 11 0;
#X connect 18 0 5 0;
#X connect 18 1 5 1;
#X connect 19 0 0 0;
#X restore 28 192 pd another_way_to_use_it;
#X text 26 67 This help patch works with the serial_print.ino sketch. Check it for more information.;
#X text 62 444 1st: list of values of a group.;
#X text 61 465 2nd: string to be used as a tag for a value group (print this first from the Arduino so that it works \, otherwise you'll probably get strange results). This comes out first \, then the value list out the left outlet;
#X obj 630 27 r Digital_values:;
#X text 26 -50 You can use commas \, spaces or tabs in between values to separate them. You can choose your delimiter via an argument (tab \, space \, comma or any \, or no argument which is the same as any). A string must precede a value group \, which will be used as a tag \, sent to the right inlet of [send] \, and used as an argument to the corresponding [receive]. The last value of each group must be printed with Serial.println() \, in order for [serial_print] to know a value group has ended.;
#N canvas 197 82 892 524 receive_floats_strings_and_bangs 0;
#X obj 72 24 vradio 15 1 0 5 empty empty empty 0 -8 0 10 #fcfcfc #000000 #000000 0;
#X obj 72 184 serial_print;
#X obj 72 206 s;
#X symbolatom 186 255 0 0 0 0 - - - 0;
#X obj 72 162 comport;
#X obj 100 110 loadbang;
#X msg 100 132 close;
#X floatatom 165 111 5 0 0 0 - - - 0;
#X msg 165 130 open \$1;
#X text 90 53 outputs a bang;
#X text 90 37 outputs a string;
#X floatatom 72 256 0 0 0 0 - - - 0;
#X text 90 21 outputs a float;
#X text 90 69 outputs a negative number;
#X floatatom 432 256 0 0 0 0 - - - 0;
#X text 90 83 outputs a mixed list;
#X obj 432 234 r negative_float;
#X obj 314 234 r a_bang;
#X obj 562 234 r mixed_list;
#X floatatom 562 456 0 0 0 0 - - - 0;
#X floatatom 601 431 0 0 0 0 - - - 0;
#X obj 562 408 unpack;
#X obj 613 279 print bang_in_list;
#X obj 562 256 route list bang;
#X obj 562 372 route a_string_in_a_list another_list_string last_list_string;
#X floatatom 663 456 0 0 0 0 - - - 0;
#X floatatom 702 431 0 0 0 0 - - - 0;
#X obj 663 408 unpack;
#X floatatom 765 456 0 0 0 0 - - - 0;
#X floatatom 804 431 0 0 0 0 - - - 0;
#X obj 765 408 unpack;
#X obj 614 316 list split 1;
#X symbolatom 614 338 0 0 0 0 - - - 0;
#X obj 562 299 t a a;
#X obj 314 256 print a_bang;
#X obj 72 234 r a_float;
#X obj 186 233 r a_string;
#X text 442 36 With [serial_print] it's possible to receive floats \, strings \, negative values \, or even bangs. All these types can be included in a list. A bang though \, since it can't be included in a list \, will always be output last \, no matter where it is placed in the Arduino code. Close [comport] in the parent patch and load the float_string_bang.ino sketch to your Arduino board. Then open its serial port in this subpatch and click on the radio buttons below.;
#X text 442 158 Note: [receive] arguments like "symbol" or "float" are possible \, but in general it's probably not a very good idea to use them since these words have a special meaning in Pd.;
#X connect 0 0 4 0;
#X connect 1 0 2 0;
#X connect 1 1 2 1;
#X connect 4 0 1 0;
#X connect 5 0 6 0;
#X connect 6 0 4 0;
#X connect 7 0 8 0;
#X connect 8 0 4 0;
#X connect 16 0 14 0;
#X connect 17 0 34 0;
#X connect 18 0 23 0;
#X connect 21 0 19 0;
#X connect 21 1 20 0;
#X connect 23 0 33 0;
#X connect 23 1 22 0;
#X connect 24 0 21 0;
#X connect 24 1 27 0;
#X connect 24 2 30 0;
#X connect 27 0 25 0;
#X connect 27 1 26 0;
#X connect 30 0 28 0;
#X connect 30 1 29 0;
#X connect 31 0 32 0;
#X connect 33 0 24 0;
#X connect 33 1 31 0;
#X connect 35 0 11 0;
#X connect 36 0 3 0;
#X restore 28 218 pd receive_floats_strings_and_bangs;
#X obj 500 -27 serial_print any;
#X text 27 108 Note: the digital pins are using the internal pull-up resistors \, using INPUT_PULLUP \, so you don't need to use resistors for switches. For this reason the readings of the digital pins are inverted so you get a 0 when you press a switch and a 1 when you release it.;
#X obj 500 27 r Analog_values:;
#X obj 778 -147 cnv 15 600 370 empty empty IR\ sensors 20 12 0 14 #feffc6 #404040 0;
#X obj 857 86 vsl 15 128 0 5 0 0 empty empty empty 0 -9 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 800 -65 unpack s f;
#X floatatom 857 40 8 0 0 0 - - - 0;
#X obj 915 -60 r resolution;
#X floatatom 915 -27 5 0 0 0 - - - 0;
#X obj 800 -94 r a0;
#X obj 901 85 s _a0;
#X obj 783 246 cnv 15 350 330 empty empty Moves\ and\ winner\ signals 20 12 0 14 #c4fcc4 #404040 0;
#X obj 818 340 unpack s f;
#X obj 988 342 unpack s f;
#X obj 2261 334 unpack s f;
#X obj 2318 358 tgl 30 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 818 312 r d0;
#X obj 988 314 r d1;
#X obj 2261 306 r d2;
#X obj 875 393 s _d0;
#X obj 1046 396 s _d1;
#X obj 2277 371 s _d2;
#X obj 490 115 cnv 15 250 200 empty empty Configuration 20 12 0 14 #dcdcdc #404040 0;
#X floatatom 511 239 5 0 0 0 - - - 0;
#X obj 511 262 s resolution;
#X msg 533 213 4095;
#X msg 511 184 1023;
#X obj 511 157 loadbang;
#X text 572 182 10-bit Arduino resolution;
#X text 572 212 12-bit Teensy resolution;
#X text 24 257 NOTE: You need to wait a bit for the IMU to be calibrated. Then the stream of sensor values arrives;
#X obj 500 -50 comport 1 115200;
#X floatatom 857 -29 5 0 0 0 - - - 0;
#X obj 1105 84 vsl 15 128 0 5 0 0 empty empty empty 0 -9 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 1048 -67 unpack s f;
#X floatatom 1105 38 8 0 0 0 - - - 0;
#X obj 1163 -65 r resolution;
#X floatatom 1163 -30 5 0 0 0 - - - 0;
#X floatatom 1105 -31 5 0 0 0 - - - 0;
#X obj 1048 -96 r a1;
#X obj 1149 83 s _a1;
#X obj 664 -134 loadbang;
#X obj 857 6 cyclone/scale 0 500 0 5 1;
#X obj 1105 4 cyclone/scale 0 500 0 5 1;
#X floatatom 875 365 5 0 0 0 - - - 0;
#X obj 654 -73 r to_Arduino;
#X floatatom 1045 369 5 0 0 0 - - - 0;
#X obj 820 480 unpack s f;
#X floatatom 877 506 5 0 0 0 - - - 0;
#X obj 820 452 r w0;
#X obj 877 532 s _w0;
#X text 819 -124 Player1 sensor;
#X text 1083 -124 Player2 sensor;
#X text 810 287 Player1 move;
#X text 970 284 Player2 move;
#X text 812 427 Winner;
#X obj 493 351 cnv 16 200 170 empty empty Console\ messages 20 12 0 14 #bbbbbb #404040 0;
#X obj 529 380 r console;
#X obj 586 460 print;
#X msg 586 432 \$1;
#X msg 664 -103 7;
#X obj 529 408 unpack s s;
#X obj 1151 254 cnv 16 200 170 empty empty Fingers\ debug\  20 12 0 14 #ffe3c6 #404040 0;
#X obj 1244 363 print;
#X msg 1244 335 \$1;
#X obj 1187 283 r fingers;
#X obj 1187 311 unpack s f;
#X connect 0 0 59 0;
#X connect 2 0 59 0;
#X connect 3 0 4 0;
#X connect 4 0 59 0;
#X connect 15 0 10 0;
#X connect 15 1 11 0;
#X connect 15 2 12 0;
#X connect 16 0 17 0;
#X connect 16 1 18 0;
#X connect 16 2 19 0;
#X connect 25 0 16 0;
#X connect 28 0 9 0;
#X connect 28 1 9 1;
#X connect 30 0 15 0;
#X connect 33 1 60 0;
#X connect 34 0 38 0;
#X connect 34 0 32 0;
#X connect 35 0 36 0;
#X connect 36 0 70 2;
#X connect 37 0 33 0;
#X connect 40 1 72 0;
#X connect 41 1 74 0;
#X connect 42 1 43 0;
#X connect 42 1 49 0;
#X connect 44 0 40 0;
#X connect 45 0 41 0;
#X connect 46 0 42 0;
#X connect 51 0 52 0;
#X connect 53 0 51 0;
#X connect 54 0 51 0;
#X connect 55 0 54 0;
#X connect 59 0 28 0;
#X connect 60 0 70 0;
#X connect 62 1 66 0;
#X connect 63 0 61 0;
#X connect 63 0 68 0;
#X connect 64 0 65 0;
#X connect 65 0 71 2;
#X connect 66 0 71 0;
#X connect 67 0 62 0;
#X connect 69 0 88 0;
#X connect 70 0 34 0;
#X connect 71 0 63 0;
#X connect 72 0 47 0;
#X connect 73 0 59 0;
#X connect 74 0 48 0;
#X connect 75 1 76 0;
#X connect 76 0 78 0;
#X connect 77 0 75 0;
#X connect 85 0 89 0;
#X connect 87 0 86 0;
#X connect 88 0 3 0;
#X connect 89 1 87 0;
#X connect 92 0 91 0;
#X connect 93 0 94 0;
#X connect 94 1 92 0;
